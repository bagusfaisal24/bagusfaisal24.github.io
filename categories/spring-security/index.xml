<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-security on Bagus Faisal Khafidz</title>
    <link>https://bagusfaisal.com/categories/spring-security/</link>
    <description>Recent content in spring-security on Bagus Faisal Khafidz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 18 May 2020 12:08:03 +0700</lastBuildDate>
    
	<atom:link href="https://bagusfaisal.com/categories/spring-security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Limit Login Attemps in Springboot Ouath2</title>
      <link>https://bagusfaisal.com/posts/limit-login-attemps/</link>
      <pubDate>Mon, 18 May 2020 12:08:03 +0700</pubDate>
      
      <guid>https://bagusfaisal.com/posts/limit-login-attemps/</guid>
      <description>Aspek keamanan dalam development aplikasi harus diutamakan, karena didalam aplikasi yang kita buat nanti akan berisi data-data penting yang harus dilindungi.
Kali ini saya akan menulis cara implementasi keamanan saat login didalam aplikasi web, cara ini bisa diimplementasikan di framework web development lainnya selain springboot, asalkan mengerti algoritma penerapannya.
Peretas memiliki banyak cara untuk membobol keamanan dalam sebuah website salah satunya bruteforce percobaan yang berulang-ulang saat login, jika saat login tidak dilengkapi cek login attemps makan peretas bakal berupaya semaksimal mungkin untuk membobol.</description>
    </item>
    
    <item>
      <title>Custom Message Error Bad Credentials Login / Authentication Spring</title>
      <link>https://bagusfaisal.com/posts/custom-authentication-oauth2/</link>
      <pubDate>Fri, 24 Apr 2020 10:59:28 +0700</pubDate>
      
      <guid>https://bagusfaisal.com/posts/custom-authentication-oauth2/</guid>
      <description>In this article I will share a case that I have found that is customizing bad credentials error messages.
The authentication used is the default oauth2 from spring, but we cannot change the bad credentials error message directly because it uses the security library from spring oauth2. The solution is we create a new class to customize the error message. Here&amp;rsquo;s an example of the code snippet.
 Seen in the code snippet above we create a new class named CustomAuthentication and implement the AuthenticationProvider class so that the class we create can log in the credentials data.</description>
    </item>
    
    <item>
      <title>Generate JKS Java Keystore Menggunakan Keytool dan OpenSSL</title>
      <link>https://bagusfaisal.com/posts/generate-keystore-open-ssl/</link>
      <pubDate>Tue, 07 Apr 2020 17:00:31 +0700</pubDate>
      
      <guid>https://bagusfaisal.com/posts/generate-keystore-open-ssl/</guid>
      <description>Persiapan Kali ini saya akan berbagi pengalaman cara generate keystore java yang akan digunakan sebagai signkey di JWT Tokens. Hal pertama yang perlu disiapkan yakni Java SE Environment (JRE) dan OpenSSL sudah terinstall di desktop anda, dan pastikan sudah masuk ke environment variable kalau di system operation windows, contohnya seperti gambar dibawah.
Implementasi Generate keystore menggunakan keytool  Buka windows PowerShell Ketikan di powershell dengan command contoh seperti dibawah untuk generate JKS file</description>
    </item>
    
  </channel>
</rss>